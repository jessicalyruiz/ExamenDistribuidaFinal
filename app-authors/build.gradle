plugins {
    id 'java'
    //id 'org.kordamp.gradle.jandex' version '1.0.0'
    id("io.freefair.lombok") version "8.4"
    id 'application'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation platform("io.helidon:helidon-dependencies:3.2.6")

    implementation('io.helidon.microprofile.server:helidon-microprofile-server')
    implementation('io.helidon.microprofile.bundles:helidon-microprofile')
    implementation('org.glassfish.jersey.media:jersey-media-json-binding')
    implementation("io.helidon.microprofile.bundles:helidon-microprofile-core")

    implementation('io.helidon.webclient:helidon-webclient') //WebClient
    implementation('io.helidon.microprofile.openapi:helidon-microprofile-openapi') //OpenAPI
    implementation("io.helidon.config:helidon-config") //Config
    implementation("io.helidon.microprofile.server:helidon-microprofile-server") //Server
    implementation("io.helidon.microprofile.cdi:helidon-microprofile-cdi") //CDI
    implementation("io.helidon.jersey:helidon-jersey-client") //RestClient
    implementation("io.helidon.health:helidon-health") //Health

    //JPA Jakarta
    /*
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("jakarta.enterprise:jakarta.enterprise.cdi-api")
    implementation("jakarta.inject:jakarta.inject-api")
    implementation("jakarta.ws.rs:jakarta.ws.rs-api")
    implementation("jakarta.persistence:jakarta.persistence-api")
    implementation("jakarta.transaction:jakarta.transaction-api")*/
    //*******
    implementation("org.jboss:jandex:3.1.6")
    implementation("jakarta.activation:jakarta.activation-api:2.1.3")
    implementation("jakarta.persistence:jakarta.persistence-api:3.2.0-M1")
    implementation("javax.transaction:javax.transaction-api:1.2")

    runtimeOnly("io.helidon.integrations.cdi:helidon-integrations-cdi-jpa:4.0.5")
    testImplementation("io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld:4.0.5")
    testImplementation("io.helidon.integrations.cdi:helidon-integrations-cdi-datasource-hikaricp:4.0.5")
    testImplementation("io.helidon.integrations.cdi:helidon-integrations-cdi-hibernate:2.0.0")
    //*****



/*

    implementation("io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld") //JTA
    // https://mavenlibs.com/maven/dependency/io.helidon.integrations.cdi/helidon-integrations-cdi-jpa
    //implementation("io.helidon.integrations.cdi:helidon-integrations-cdi-jpa")

    implementation ("io.helidon.dbclient:helidon-dbclient-jdbc") // Driver JDBC: PostgreSQL
    implementation("org.hibernate:hibernate-entitymanager:5.6.15.Final") //Hibernate
   // implementation("org.hibernate:hibernate-entitymanager:6.0.0.Alpha7")

    //runtimeOnly('org.jboss:jandex')
    runtimeOnly('jakarta.activation:jakarta.activation-api')
    //*****

   // runtimeOnly("io.helidon.integrations.cdi:helidon-integrations-cdi-jpa:4.0.5")

    //****



*/
    testImplementation('io.helidon.microprofile.tests:helidon-microprofile-tests-junit5')
    testCompileOnly('org.junit.jupiter:junit-jupiter-api:')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:')

}

application {
    mainClass = 'io.helidon.microprofile.cdi.Main'
}

test {
    useJUnitPlatform()
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/libs'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.distTar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.distZip {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


copyLibs.dependsOn jar
assemble.dependsOn copyLibs
/*
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes (
                'Main-Class': "${application.mainClass}",
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}*/
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes (
                'Main-Class': "io.helidon.microprofile.cdi.Main",
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}


task copyBeansXML {
  doLast {
    ant.copy file: "${projectDir}/src/main/resources/META-INF/beans.xml",
             todir: "${buildDir}/classes/java/main/META-INF"
  }
}

classes.dependsOn copyBeansXML